name: Deploy Website

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout do código
      - name: Check out code
        uses: actions/checkout@v3

      # 2) Setup Java (use a versão que seu projeto suporta)
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 23

      # 3) Build do backend
      - name: Build Backend
        working-directory: ./backend/alpha
        run: |
          mvn clean package -DskipTests
          echo "=== Conteúdo da pasta target/ ==="
          ls -l target

      # 4) Deploy do backend
      - name: Deploy Backend
        working-directory: ./backend/alpha
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          SERVER_PATH: ${{ secrets.BACKEND_PATH }}
        run: |
          # Instala sshpass
          sudo apt-get update && sudo apt-get install -y sshpass

          # Identifica o .jar (pega o primeiro encontrado na pasta target)
          JAR_FILE=$(find target -type f -name "*.jar" | head -n 1)
          echo "Arquivo JAR encontrado: $JAR_FILE"

          # Se não achou JAR_FILE, falha explicitamente
          if [ -z "$JAR_FILE" ]; then
            echo "Erro: nenhum arquivo .jar encontrado em target/. Verifique seu Maven build."
            exit 1
          fi

          # Faz o SCP, desativando a verificação estrita da chave
          sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no "$JAR_FILE" "$SERVER_USER"@"$SERVER_IP":"$SERVER_PATH"

          # Mata a aplicação anterior e inicia a nova
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no "$SERVER_USER"@"$SERVER_IP" << EOF
            # Tenta matar qualquer processo que contenha 'java -jar'
            pkill -f 'java -jar' || true

            # Inicia a aplicação em segundo plano com nohup
            nohup java -jar "$SERVER_PATH"/$(basename "$JAR_FILE") --server.servlet.context-path=/api > "$SERVER_PATH"/backend.log 2>&1 &
          EOF

      # 5) Setup Node para o frontend
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # 6) Build do frontend
      - name: Build Frontend
        working-directory: ./frontend/alpha
        run: |
          npm install
          npm run build

      # 7) Deploy do frontend
      - name: Deploy Frontend
        working-directory: ./frontend/alpha
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          SERVER_PATH: ${{ secrets.FRONTEND_PATH }}
        run: |
          sshpass -p "$SERVER_PASSWORD" rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./build/ "$SERVER_USER"@"$SERVER_IP":"$SERVER_PATH"
